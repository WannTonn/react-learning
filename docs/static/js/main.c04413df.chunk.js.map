{"version":3,"sources":["views/ToDoList/index.tsx","App.tsx","index.tsx"],"names":["TodoList","useState","inputVal","setInputVal","todoList","setTodoList","firstRender","useRef","useEffect","current","localStorage","setItem","JSON","stringify","localTodoItem","getItem","parse","className","onSubmit","e","preventDefault","id","Date","getTime","name","type","value","onChange","target","placeholder","style","display","onClick","length","map","index","d","isChecked","console","log","arr","handleCheckThing","checked","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","size","filter","todo","App","Tabs","TabPane","ReactDOM","render","document","getElementById"],"mappings":"yPAuFeA,EAlFE,WAEf,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAcC,kBAAO,GA4C3B,OAbAC,qBAAU,WACJF,EAAYG,QACdH,EAAYG,SAAU,EAEtBC,aAAaC,QAAQ,WAAYC,KAAKC,UAAL,YAAmBT,OAErD,CAACA,IACJI,qBAAU,WACR,IAAIM,EAAgBJ,aAAaK,QAAQ,YACrCD,GACFT,EAAYS,EAAgBF,KAAKI,MAAMF,GAAiB,MAEzD,IAED,sBAAKG,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,uBACA,sBAAKA,UAAU,kBAAf,UACE,sBAAMC,SA/CS,SAACC,GAEpB,GADAA,EAAEC,kBACGlB,EAAY,OAAO,EACxBG,EAAY,GAAD,mBAAKD,GAAL,CAAe,CACxBiB,IAAI,IAAIC,MAAOC,UACfC,KAAMtB,MAGRC,EAAY,KAuCR,SACE,sBAAKc,UAAU,eAAf,UACE,uBAAOA,UAAU,YAAYQ,KAAK,OAAOC,MAAOxB,EAAUyB,SAAU,SAACR,GAAD,OAAOhB,EAAYgB,EAAES,OAAOF,QAAQG,YAAY,qDACpH,wBAAQJ,KAAK,SAASK,MAAO,CAAEC,QAAS,UACxC,wBAAQd,UAAU,MAAMe,QAAS,WAC/B5B,EAAS6B,QAAU5B,EAAY,KADjC,wBAKJ,qBAAKY,UAAU,YAAf,SAEIb,EAAS8B,KAAI,SAACf,EAAGgB,GAAJ,OACX,sBAAKlB,UAAU,OAAf,UACE,cAAC,IAAD,CAAQU,SAAU,SAACS,GAAD,OAtCP,SAACC,EAAUhB,GAClCiB,QAAQC,IAAIF,GAEZ,IAAIG,EAAMpC,EAAS8B,KAAI,SAACf,GACtB,OAAOA,EAAEE,KAAOA,EAAT,2BAAmBF,GAAnB,IAAsBkB,cAAclB,KAE7Cd,EAAYmC,GAgCyBC,CAAiBL,EAAGjB,EAAEE,KAAKJ,UAAU,aAAayB,QAASvB,EAAEkB,UAAWM,gBAAiB,cAACC,EAAA,EAAD,IAAmBC,kBAAmB,cAACC,EAAA,EAAD,IAAmBC,KAAK,UAEhL,qBAAK9B,UAAS,gBAAWE,EAAEkB,UAAY,YAAc,IAArD,SACGlB,EAAEK,OAEL,qBAAKP,UAAU,SAAf,SACE,qBAAKA,UAAU,SAASe,QAAS,kBAnDzBX,EAmD8CF,EAAEE,QAlDtEhB,EAAYD,EAAS4C,QAAO,SAACC,GAAD,OAAUA,EAAK5B,KAAOA,MAD7B,IAACA,GAmDR,sBAPuBF,EAAEE,gBCnC5B6B,GAjBKC,IAAZC,QACI,WACV,OACE,mCAUE,cAAE,EAAF,Q,YClBNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c04413df.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { Switch } from 'antd';\nimport './style.scss';\n\nconst TodoList = () => {\n\n  const [inputVal, setInputVal] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  const firstRender = useRef(true);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!inputVal) { return false };\n    setTodoList([...todoList, {\n      id: new Date().getTime(),\n      name: inputVal\n    }])\n\n    setInputVal('');\n  }\n\n  /**\n   * @description 删除某个项目\n   * @param\n   */\n  const handleDelThing = (id: number) => {\n    setTodoList(todoList.filter((todo) => todo.id !== id));\n  }\n  /**\n   * @description 完成行项目\n   * @param\n   */\n  const handleCheckThing = (isChecked,id: number) => {\n    console.log(isChecked);\n    \n    let arr = todoList.map((e) => {\n      return e.id === id ? { ...e, isChecked } : e\n    })\n    setTodoList(arr);\n  }\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n    } else {\n      localStorage.setItem('TodoItem', JSON.stringify([...todoList]))\n    }\n  }, [todoList])\n  useEffect(() => {\n    let localTodoItem = localStorage.getItem('TodoItem');\n    if (localTodoItem) {\n      setTodoList(localTodoItem ? JSON.parse(localTodoItem) : []);\n    }\n  }, [])\n  return (\n    <div className='App'>\n      <div className=\"title\">Todo List</div>\n      <div className=\"todoListWrapper\">\n        <form onSubmit={handleSubmit}>\n          <div className='inputWrapper'>\n            <input className='todoInput' type=\"text\" value={inputVal} onChange={(e) => setInputVal(e.target.value)} placeholder='今天要做什么呢？' />\n            <button type='submit' style={{ display: 'none' }} />\n            <button className='btn' onClick={() => {\n              todoList.length && setTodoList([]);\n            }}>Clear</button>\n          </div>\n        </form>\n        <div className=\"todoLists\">\n          {\n            todoList.map((e, index) => (\n              <div className=\"item\" key={e.id}>\n                <Switch onChange={(d) => handleCheckThing(d, e.id)} className=\"switchItem\" checked={e.isChecked} checkedChildren={<CheckOutlined />} unCheckedChildren={<CloseOutlined />} size=\"small\" />\n\n                <div className={`thing ${e.isChecked ? 'isChecked' : ''}`}>\n                  {e.name}\n                </div>\n                <div className=\"optBox\">\n                  <div className='delBtn' onClick={() => handleDelThing(e.id)}>×</div>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TodoList;","import React from 'react';\nimport { Tabs } from 'antd';\nimport TodoList from './views/ToDoList';\nimport Animation from './views/Animation';\nconst navs = [\n  {\n    key: 1,\n    tab: 'TodoList',\n    content: <TodoList />\n  },\n  /* {\n    key: 2,\n    tab: 'Animation',\n    content: <Animation />\n  }, */\n\n]\nconst { TabPane } = Tabs;\nconst App = () => {\n  return (\n    <>\n      {/* <Tabs defaultActiveKey=\"1\" centered >\n      {\n        navs.map(e => (\n          <TabPane tab={e.tab} key={e.key} >\n          {e.content}\n          </TabPane>\n          ))\n        }\n      </Tabs> */}\n      < TodoList />\n    </>\n  )\n}\nexport default App;","/*\n * @Author: WannTonn\n * @Date: 2021-07-03 22:39:21\n * @Description: \n * @FilePath: /react-learning/src/index.js\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.min.css';\nimport './global.scss';\n// import TodoList from './views/ToDoList'\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}